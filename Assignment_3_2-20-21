1: I will be using convolutions in order to increase the efficacy of my neural network as they usually make the NN have better fit. The way that this happens is through using filters.
When you apply the filter to the original image it helps to process it to make is easier for the computer to "see" what is happening.  For insatnce, some basic processing also occuring iss turning the image to grayscale and then assigning a numerical value to every pixel based on saturation strength.
This intense processing of the image tends to accentuate features in the transformed image based on the filter, for instance, some filters can help emphasize vertical lines rather than horiztonal ones based on the filter.  This can allow your selected filter to be better at helping the computer to 'see' and then identify certain images.


The first filter I used is as below:
[-1, -1, -1], [0, 0, 0], [1, 1, 1]
![Filter_7_Stairway_7](https://user-images.githubusercontent.com/78227412/108608493-34515980-7395-11eb-8322-cc291fc929bf.png)
As we can see, ths filter seems to be rather solid and in my opinion, a pretty good baseline


The second filter I used is as below:
[-3, 4, -2], [1,-1,1], [0, -1, 1]
![Filter_1_Stairway_1](https://user-images.githubusercontent.com/78227412/108608518-6498f800-7395-11eb-938f-714f1ed2cb3e.png)
As we can see, this filter does a very good job at caputirng most lines but somewhat struggles with the top center


The third filter that I used is as below
[0, 1, 0], [1, -4, 1], [0, 1, 0]
![Filter_4_Stairway](https://user-images.githubusercontent.com/78227412/108608535-80040300-7395-11eb-93a0-8b3af5fce7b6.png)
As we can see, this filter does not have very well defined lines.


2:Question 2: What I am going to do now is using a filter method called pooling. What this will functionally do is further process the image by decreasing its resolution. This allows all "extra" information present in the image to be taken away, basically reducing it its almost the minimum "computer vision" needs to identify objects. The filter operates through splitting the image into a grid.  Inside each grid box are some pixels.  the computer then selects which box contains the most intense pixel (one with the highest numerical value/saturation) and then forgets about the rest.  An itneresting result is that the new image is 1/4 of its original size due to the computer "throwing out" the "extra" information.
The 2x2 filter is as below: [10, 1, 0], [-5, -1, -5], [-7, 6, 0]
![Filter_2x2_Stairway_DL](https://user-images.githubusercontent.com/78227412/108608559-b17cce80-7395-11eb-940f-6bab265d79ef.png)
As we can see, the pooling filter really makes the image pop and helps make the lines incredibly intense.


Convolution Solution:
[0, 0, 0, 3, 0, 0, 0],
[0, 0, 0, 3, 0, 0, 0],
[1, 1, 1, 3, 1, 1, 1],
[1, 1, 1, 3, 1, 1, 1],
[1, 1, 1, 3, 1, 1, 1],
[0, 0, 0, 3, 0, 0, 0],
[0, 0, 0, 3, 0, 0, 0]

Stretch Goal:

